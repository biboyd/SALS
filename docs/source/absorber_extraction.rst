.. _absorber-extraction:

Absorber Extraction
====================

The main purpose of salsa is to extract absorbers from lightrays. Doing this
allows us to create synthetic absorption line catalogs/surveys in an analogous
fashion as real observational surveys. There are two methods which salsa can
extract absorbers: (1.) The ice method which looks directly at cell level data of the
simulation.  (2.) Spectacle method which uses the
`spectacle python package <https://spectacle-py.readthedocs.io/>`_ to fit voigt
profiles to synthetic spectra that is generated by
`trident <https://trident.readthedocs.io/>`_.

.. _ice-method:

Ice Method
-----------
the ice (Iterative Cloud Extraction) method looks at a trident lightray and
attempts to extract "absorbers" by identifying contiguous groups of cells along
the ray that will contribute to observable features in the absorption spectra.

The algorithm that does this is an iterative process and for a more detailed and
likely easier to comprehend explanation see :ref:`detailed-ice-method`. But here is a
rundown of how the algorithm functions to extract absorbers from a light ray

quick rundown of ice method:

  1.) Find cutoff in number density such that 80% of the column density is
  contained in cells with number density above this threshold.

  2.) Define intervals that encompass the cells which meet this cutoff.

  3.) Mask the intervals along the lightray that  were found in the previous step

  4.) Repeat same step as (1.). Find the 80% cutoff based on the column density
  *left over*.

  5.) define intervals just as (3.)

  6.) Take all the intervals that have been found and sensibly combine all of
  them together. We do this by combining overlapping intervals **if** the average
  velocity of each intervals are within a threshold (set by
  :class:`~AbsorberExtractor.velocity_res` parameter. Default is 10 km/s)

  7.) Now repeat process starting at step 3 until the total column density that
  is *left over* in the lightray (ie not in an interval) is less than some
  the lowest detectable column density (set by :class:`~AbsorberExtractor.min_absorber`
  parameter. Default is Log(N)=13, though it can vary based on ion)

  8.) Finally, we check whether each interval meets the detectable column density
  threshold. We return only the intervals that are above the threshold and define
  these to be our absorbers.

.. _spectacle-method:

Spectacle
----------

This method utilizes trident's feature of creating synthetic spectra from a
light ray object as well as spectacle's ability to fit lines to these spectra.
For more details about how Spectacle works and specifically how it runs fits see
`Spectacle: Line Finding
<https://spectacle-py.readthedocs.io/en/latest/line_finding.html>`_ and
`Spectacle: Fitting <https://spectacle-py.readthedocs.io/en/latest/fitting.html>`_

.. _detailed-ice-method:

Detailed Ice Example
-----------------------------

If you want a better understanding of how the ice method works, here is a real
life example. We break down each step of the method so you can see the under
workings and see how some of the parameters may impact the algorithm.

Here is our lightray. We are looking at the number density of O VI along its
length. Our goal is to find which intervals of cells along the lightray will
meaningfully contribute to the absorption spectra of the lightray.

-------image of just num density no nothing else ---------------

The first step is to find a cutoff value in number density such that cells above
this cutoff make up 80% of the column density.

.. note:

  This 80% value is just the default value and can be tweak. Empirically, the
  algorithm is fairly insensitive to this value. To change it, change the
  :class:`~AbsorberExtractor.frac`

-------------image of cut line and intervals -----------------

These shaded in intervals now contain 80% of the column density for the lightray.
Our next step is to mask these regions and repeat the process, again find the 80%
cutoff but now only considering the .
